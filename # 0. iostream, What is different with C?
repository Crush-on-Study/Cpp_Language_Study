/****************************************************************
******** Language : C++ ******************************************
************** OS : Windows *************************************
*********************** IDE : Dev C++  and  VScode **************
********************************** Let's start! ********************
******************************************************************/

// # 0. iostream, What is different with C?

C언어와 C++에 있어서 가장 큰 차이가 뭐냐고 묻는다면 
10에 9명은 객체지향과 절차지향이라는 차이다! 라고 답합니다.

이 차이는 C언어에서의 구조체. 그리고 C++에서의 클래스에서 가장 명확한 차이를 보여주는 예시가 됩니다.
C언어 구조체에서는 다음과 같은 함수 원형을 가집니다. (typedef struct)

-------------------------------------------------------------------------
#include <stdio.h>

typedef struct cat {
	int age;
	double weight;
	char *name;
} cat;

int main()
{
	cat maxi;
	maxi.age = 10;
	.
	.
	
  return 0;
}
-------------------------------------------------------------------------

main함수 이전에 구조체 함수 cat을 선언하고 cat이 담고 있는 정보들을 각각의 자료형에 맞게 선언을 했습니다.
고양이의 나이, 고양이의 몸무게, 고양이의 이름 등등 개묘정보(?)들을 담고 있는데  고양이의 행동 패턴에 대해서는
담겨있지 않습니다. 그저 정보만을 알려줄 뿐입니다.

C++로 넘어오면서는 구조체에서 행동패턴까지 추가를 시키게 되는데 이걸 우리는 클래스라고 부릅니다.
정보도 담고 있고, 그 정보를 토대로 어떠한 행동을 할 것인지까지 정의를 해줍니다.
이처럼 함수 하나가 정보 및 행동을 모두 담고 있는 것을 '객체' 라고 합니다. 

뒤에서 클래스 개념을 설명할 때 보다 자세히 다룰 일들이 많으니 이번 글에선 객체란 정보와 행동패턴을 동시에 갖고 수행하는 개념이구나! 라고 받아들이시면 됩니다.
--------------------------------------------------------------------------------------------------------------------------------------------------


#include <iostream>

int main()
{
	std::cout << "Not hello World..." << std::endl;
	
	return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------------

- <iostream> ??
§ 새로운 헤더파일이 보입니다. C언어를 떼고 오신 분이라면 눈에 들어오는게 있을 겁니다. 
Input/Output stream의 약자입니다. 맞습니다. C++의 표준 입출력 헤더파일입니다.

§ 코드들을 보니까 C언어와 상당히 유사합니다. 혹시 #include <stdio.h>도 가능한가요?
가능은 합니다. 근데 웬만하면 <iostream> 혹은 <cstdio>로 선언하는게 좋습니다. 
C언어에서의 헤더파일에 .h를 빼고 제일 앞에 c를 붙이는 것은 C언어에서 사용하던 표준 헤더파일을 C++에 맞춤대응하겠다! 라는 의미라고 보시면 됩니다.

- std::cout ? std::endl ??
§ cout은 C언어로 치면 printf와 동일합니다. 그리고 endl은 개행을 의미합니다. 즉, C언어에서 Escape 문자였던 \n와 같은 기능을 합니다.
물론 C++에서도 Escape 문자들은 그대로 존재합니다. \n도요!

§ std::는 std라는 이름공간을 의미하고 ::는 범위지정연산자를 의미합니다. 이것도 객체언어이기 때문에 생긴 개념인데요. 나중에 자세히 설명하겠지만
여기서 사용한 cout과 endl이 어떤 이름공간에 정의된 함수인지 알려주기 위해 쓰는 것입니다. std라는 이름공간에서 정의된 cout, endl다~ 라고 보시면 됩니다.

실생활에서 예시를 적용해봅시다. 김덕배라는 사람이 있는데요. 전국에 김덕배라는 사람은 최소한 여러 명은 될 것입니다. 구수한 이름인만큼 상당히 매력적이니까요.
근데 우리가 아는 김덕배씨는 고양시 일산동구 백석동에 사는 김덕배씨라고 가정하고 점심 약속을 잡기로 했습니다.
따라서 C++상에서 이를 표현하고자 할 때!  고양시_일산동구_백석동::점심약속 (Char 김덕배);  이런 식으로 김덕배씨를 정의하면 됩니다.
